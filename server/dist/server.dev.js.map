{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","multer","bodyParser","jwt","User","app","use","urlencoded","extended","json","connect","then","console","log","err","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","post","single","res","body","email","username","password","picture","newUser","create","profilepic","status","send","success","user","error","message","find","token","sign","expiresIn","verify","next","headers","authorization","split","secret","key","decoded","get","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst multer = require(\"multer\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst jwt = require('jsonwebtoken')\r\nconst User = require(\"./models/User.js\");\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.json());\r\napp.use(express.static(\"public\"));\r\n\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/Profile\")\r\n  .then(() => {\r\n    console.log(\"Connected to DB\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"public/profilePic\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + file.originalname);\r\n  },\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n});\r\n//routes\r\napp.post(\"/register\", upload.single(\"profilepic\"), async (req, res) => {\r\n  try {\r\n    const { email, username, password } = req.body;\r\n    const picture = req.file.filename;\r\n    const newUser = User.create({\r\n      username,\r\n      email,\r\n      password,\r\n      profilepic: picture,\r\n    });\r\n    res.status(201).send({ success: true, user: newUser });\r\n  } catch (error) {\r\n    res.status(500).json({ message: true, error });\r\n  }\r\n})\r\n\r\n\r\napp.use('/login', async(req,res)=>{\r\n    const {email, password} = req.body\r\n    console.log(password)\r\n    console.log(email)\r\n    try {\r\n      const user = await User.find(email)\r\n      console.log(user)\r\n      console.log(user.password)\r\n      if(user){\r\n        if(user.password === password){\r\n          const token = jwt.sign({email:email},'jwt-secret-key-token', {expiresIn:'1m'})\r\n          console.log(token)\r\n          res.json({success:\"Logged in successfully\",token,user})\r\n        }\r\n      }\r\n      else{\r\n        res.json({message:\"Error while log in \"})\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n})\r\nconst verify = (req,res,next)=>{\r\n  const token = req.headers.authorization && req.headers.authorization.split(' ')[1]\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ error: 'No token provided' });\r\n  }\r\n  jwt.verify(token, jwt-secret-key-token, (err, decoded) => {\r\n    if (err) {\r\n      return res.status(401).json({ error: 'Unauthorized' });\r\n    }\r\n\r\n    req.user = decoded;\r\n    next();\r\n  });\r\n}\r\napp.get('/getuser',verify,(req,res)=>{\r\n  const user = req.user \r\n  res.json({message:\"verified\",user:user})\r\n})\r\n\r\napp.listen(8000, () => {\r\n  console.log(\"Server is running on 8000\");\r\n});\r\n"],"file":"server.dev.js"}