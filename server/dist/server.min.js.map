{"version":3,"sources":["server.js"],"names":["express","require","mongoose","multer","jwt","cors","app","use","bodyParser","extended","json","connect","then","log","err","console","diskStorage","req","file","cb","filename","storage","Date","originalname","upload","post","single","res","_req$body","email","username","password","picture","newUser","regeneratorRuntime","async","_context","prev","next","User","create","profilepic","status","send","success","user","error","message","stop","body","find","sign","expiresIn","token","_context2","t0","headers","authorization","split","verify","secret","key","decoded","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst multer = require(\"multer\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst jwt = require('jsonwebtoken')\r\nconst User = require(\"./models/User.js\");\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.json());\r\napp.use(express.static(\"public\"));\r\n\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/Profile\")\r\n  .then(() => {\r\n    console.log(\"Connected to DB\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"public/profilePic\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + file.originalname);\r\n  },\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n});\r\n//routes\r\napp.post(\"/register\", upload.single(\"profilepic\"), async (req, res) => {\r\n  try {\r\n    const { email, username, password } = req.body;\r\n    const picture = req.file.filename;\r\n    const newUser = User.create({\r\n      username,\r\n      email,\r\n      password,\r\n      profilepic: picture,\r\n    });\r\n    res.status(201).send({ success: true, user: newUser });\r\n  } catch (error) {\r\n    res.status(500).json({ message: true, error });\r\n  }\r\n})\r\n\r\n\r\napp.use('/login', async(req,res)=>{\r\n    const {email, password} = req.body\r\n    console.log(password)\r\n    console.log(email)\r\n    try {\r\n      const user = await User.find(email)\r\n      console.log(user)\r\n      console.log(user.password)\r\n      if(user){\r\n        if(user.password === password){\r\n          const token = jwt.sign({email:email},'jwt-secret-key-token', {expiresIn:'1m'})\r\n          console.log(token)\r\n          res.json({success:\"Logged in successfully\",token,user})\r\n        }\r\n      }\r\n      else{\r\n        res.json({message:\"Error while log in \"})\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n})\r\nconst verify = (req,res,next)=>{\r\n  const token = req.headers.authorization && req.headers.authorization.split(' ')[1]\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ error: 'No token provided' });\r\n  }\r\n  jwt.verify(token, jwt-secret-key-token, (err, decoded) => {\r\n    if (err) {\r\n      return res.status(401).json({ error: 'Unauthorized' });\r\n    }\r\n\r\n    req.user = decoded;\r\n    next();\r\n  });\r\n}\r\napp.get('/getuser',verify,(req,res)=>{\r\n  const user = req.user \r\n  res.json({message:\"verified\",user:user})\r\n})\r\n\r\napp.listen(8000, () => {\r\n  console.log(\"Server is running on 8000\");\r\n});\r\n"]}